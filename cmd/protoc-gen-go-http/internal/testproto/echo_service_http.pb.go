// Code generated by protoc-gen-go-http. DO NOT EDIT.

package testproto

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type EchoServiceService interface {
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)

	EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error)

	EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error)

	EchoPatch(context.Context, *DynamicMessageUpdate) (*DynamicMessageUpdate, error)
}

func RegisterEchoServiceHTTPServer(s *http1.Server, srv EchoServiceService) {
	r := s.Route("/")

	r.GET("/v1/example/echo/{id}/{num}", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := http1.BindVars(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).Echo(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.GET("/v1/example/echo/{id}/{num}/{lang}", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := http1.BindVars(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).Echo(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.GET("/v1/example/echo1/{id}/{line_num}/{status.note}", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := http1.BindVars(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).Echo(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.GET("/v1/example/echo2/{no.note}", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := http1.BindVars(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).Echo(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.POST("/v1/example/echo/{id}", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := http1.BindVars(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).Echo(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.POST("/v1/example/echo_body", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := s.Decode(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).EchoBody(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.DELETE("/v1/example/echo_delete", func(res http.ResponseWriter, req *http.Request) {
		in := new(SimpleMessage)

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).EchoDelete(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.PATCH("/v1/example/echo_patch", func(res http.ResponseWriter, req *http.Request) {
		in := new(DynamicMessageUpdate)

		if err := s.Decode(req, in.Body); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(EchoServiceService).EchoPatch(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

}
